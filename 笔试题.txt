//评测题目: 无

// 第一题 ===========================
var opt = {
    name:"Amy",
    name2: this.name,
    say:function(){
        return this.name;
    },
    say2:function(){
        setTimeout(function(){
            console.log(this.name);
        })
    },
    say3:function(){
        setTimeout(() => {
            console.log(this.name);
        })
    }
}

console.log(opt.name2); //1. 这里打印出什么？Amy
console.log(opt.say); //2. 这里打印出什么？ function
opt.say2(); //3. 这里打印出什么？ undefined
opt.say3(); //4. 这里打印出什么？Amy






// 第二题 ===========================
<!--
实现一个方法genCssSelector，可以根据一个给定的元素生成一个CSS选择器，通过这个选择器可以快速定位到这个元素（document.querySelector(A)）
-->
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    <div id="page">
        <div class="content main">
            <div class="refer">
                <ul>
                    <li></li>
                    <li></li>
                    ...
                </ul>
             </div>
        </div>
    </div>
</body>
</html>
根据上述HTML结构，完善如下JavaScript代码中的“your code here”部分，使得click事件中的注释要求符合预期：
var genCssSelector = function(node){
    // your code here
    var path = "html body ";
    var list = document.getElementById("page");
    path += '#page ';
    var child = list.firstChild;
    while(child != list.lastChild) {
    	// 获取child class name and id值.
      	// 针对id 添加#+id name.
        var idName = '#' + child.getId();
        // 针对id 添加. + class name.
        var className = '.' + child.getClassName();
        path += idName;
        path += className;
        type node
        break;
    	child = child.nextSbling;
    }
    return path;
}

document.addEventListener('click', function(e){
    //点击li时，打印出：html body #page .content.main .refer ul li
    console.log(genCssSelector(e.target));
})







// 第三题 ===========================
/**
 * 实现applyMiddleWare，达到如下示例的效果：
 *
 * function rawMethod(a) {
 *     return a + 1;
 * }
 * function middleware1(next) {
 *     return function(a) {
 *         return next(a) + 1;
 *     };
 * }
 * function middleware2(next) {
 *     return function(a) {
 *         return next(a) + 1;
 *     };
 * }
 * function middleware3(next) {
 *     return function(a) {
 *         return next(a) + 1;
 *     };
 * }
 *
 * var newMethod = applyMiddleWare(rawMethod, middleware3, middleware2);
 * var x = newMethod(1); // 调用顺序：middleware2 -> middleware3 -> rawMethod，结果：x=3
 *
 * var newMethod2 = applyMiddleWare(newMethod, middleware1);
 * var y = newMethod2(10); // 调用顺序：middleware1 -> middleware2 -> middleware3 -> rawMethod，结果：y=13
 *
 */﻿​

function applyMiddleWare() {
	// your code here
    var list = [...arguments];
    // 可以通过参数数量来实现不同的方法
  	// length 为3时，参数方法倒序调用
    if (list.length === 3) {
    	return function (x) {
        	list[2](list[1](list[0](x)));
        }
    } else if (list.length === 2){
    	return function (x) {
        	list[1](list[0](x));
        }
    } else {
    	console.error('apply middleware not support this argurments number.');
    }
}






// 第四题 ===========================
/*
使用React或者Vue或者任何其他方式，实现如下组件，并且不失input原生组件能力。
https://zos.alipayobjects.com/skylark/fa965c45-088f-4a07-9f41-58af0871c0cb/attach/8107/4cb06836ae8f268b/image.png
*/

// 输入框组件, 边框蓝色, 右侧有 2/10
// Input 控件 限制输入字数, v-model绑定输入数据
// 实时展示当前输入字数,可以用label绑定输入框数据,通过绝对定位，放在输入框内部

<template>
	<div>
		<Input class='textinput' v-model="textContent" maxlength="10">
    	<label class='textlabel' :value="inputInfo"></label>
    </div>
</template>
<script>
	export default {
    	data () {
        	return {
            	textContent: '',
                limitContentLength: 10
            }
        },
        computed: {
        	textLength () {
            	return this.textContent.length;
            },
            inputInfo () {
            	return this.textLength + '/' + this.limitContentLength;
            }
        }
    }
</script>
<style>
	.textinput {
    	position: relation;
    	width: 824px;
        height: 84px;
        border: solid 1px blue;
    }
    .textlabel {
    	position: absolate;
        float: right;
        top: 20px;
        right: 10px;
        color: #000000;
        font-size: 14px;
    }
</style>





